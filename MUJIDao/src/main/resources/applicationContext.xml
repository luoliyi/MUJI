<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

    <!--1 引入属性文件，在配置中占位使用，作用是获取连接数据库配置 -->
    <context:property-placeholder location="classpath*:dbconfig.properties" />

    <!--2 配置C3P0数据源 C3P0，连接池,连接数据库 -->
    <bean id="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <!--驱动类名 -->
        <property name="driverClass" value="${mysql.driver}" />
        <!-- url -->
        <property name="jdbcUrl" value="${mysql.url}" />
        <!-- 用户名 -->
        <property name="user" value="${mysql.username}" />
        <!-- 密码 -->
        <property name="password" value="${mysql.password}" />
        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数  -->
        <property name="acquireIncrement" value="5"></property>
        <!-- 初始连接池大小 -->
        <property name="initialPoolSize" value="10"></property>
        <!-- 连接池中连接最小个数 -->
        <property name="minPoolSize" value="5"></property>
        <!-- 连接池中连接最大个数 -->
        <property name="maxPoolSize" value="20"></property>
    </bean>

    <!--3 会话工厂bean sqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--mybatisconf.xml-->
        <property name="configLocation" value="classpath:mybatisconf.xml" />
        <!-- 数据源 -->
        <property name="dataSource" ref="datasource"></property>
        <!-- 别名 -->
        <property name="typeAliasesPackage" value="com.nf.entities"></property>
        <!-- sql映射文件路径 -->
        <property name="mapperLocations" value="classpath*:mappers/*Mapper.xml"></property>
    </bean>

    <!--4 自动扫描对象关系映射 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定会话工厂，如果当前上下文中只定义了一个则该属性可省去 ,value映射sqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <!-- 指定要自动扫描接口的基础包，实现接口 -->
        <property name="basePackage" value="com.nf.interfaces"></property>
    </bean>

    <!--5 声明式事务管理-->
    <!--定义事物管理器，由spring管理事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="datasource"></property>
    </bean>
    <!--支持注解驱动的事务管理，指定事务管理器 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--6 容器自动扫描IOC组件  -->
    <context:component-scan base-package="com.nf.interfaces,com.nf.dao.test"></context:component-scan>

    <!--7 aop记录日常日志-->
    <!--被代理的目标对象用扫描 -->
    <context:component-scan base-package="com.nf.dao"></context:component-scan>
    <!-- 通知 -->
    <bean id="advices" class="com.nf.commons.SpringAop.Advices"></bean>
    <!-- AOP配置 -->
    <!-- proxy-target-class属性表示被代理的类是否为一个没有实现接口的类，Spring会依据实现了接口则使用JDK内置的动态代理，如果未实现接口则使用cglib -->
    <aop:config proxy-target-class="true">
        <!-- 切面配置 -->
        <!--ref表示通知对象的引用 -->
        <aop:aspect ref="advices">
            <!-- 配置切入点(横切逻辑将注入的精确位置) -->
            <aop:pointcut expression="execution(public * com.nf.interfaces..*(..))" id="pointcut1"/>
            <!--指明多个切入点······· -->
            <aop:pointcut id="" expression=""></aop:pointcut>
            <aop:pointcut id="" expression=""></aop:pointcut>
            <aop:pointcut id="" expression=""></aop:pointcut>

            <!--声明通知，method指定通知类型，pointcut指定切点，就是该通知应该注入那些方法中 -->
            <aop:before method="beforeMethod" pointcut-ref="pointcut1"></aop:before>
            <aop:after method="afterMethod" pointcut-ref="pointcut1"></aop:after>
            <!--  <aop:around method="aroundMethod" pointcut="execution(public * Entities..*.sing*(..))" pointcut-ref="pointcut1"/>-->
            <aop:around method="aroundMethod" pointcut-ref="pointcut1"/>
            <aop:after-throwing method="afterThrowing" pointcut-ref="pointcut1" throwing="ex"/>
            <aop:after-returning method="afterReturning" pointcut-ref="pointcut1" returning="result"/>
        </aop:aspect>
    </aop:config>

</beans>